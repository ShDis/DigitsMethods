#Дана задача Коши
#{ y' = f(x,y)
#{ y(a) = y0
#где функция f(x,y), отрезок [a,b], начальное значение y0
#
#n = 9
#
#Методом Рунге-Ромберга вычислите значение y(x) в правом конце отрезка с заданной точностью 10^-5

# Определение функции f(x, y)
def f(x,y):
    return -(1+x*y)/(x*x)

def runge_romberg(a, b, y0, h, epsilon):
    # Метод Рунге-Ромберга для решения задачи Коши
    x = a  # Начальное значение x
    y = y0  # Начальное значение y

    while x < b:
        # Вычисление значения функции y(x) с шагом h
        k1 = h * f(x, y)
        k2 = h * f(x + h / 2, y + k1 / 2)
        k3 = h * f(x + h / 2, y + k2 / 2)
        k4 = h * f(x + h, y + k3)
        y1 = y + (k1 + 2 * k2 + 2 * k3 + k4) / 6

        # Вычисление значения функции y(x) с шагом h/2
        k1 = h / 2 * f(x, y)
        k2 = h / 2 * f(x + h / 4, y + k1 / 4)
        k3 = h / 2 * f(x + h / 4, y + k2 / 4)
        k4 = h / 2 * f(x + h / 2, y + k3 / 2)
        y2 = y + (k1 + 2 * k2 + 2 * k3 + k4) / 6

        # Вычисление значения функции y(x) с шагом h/4
        k1 = h / 4 * f(x, y)
        k2 = h / 4 * f(x + h / 8, y + k1 / 8)
        k3 = h / 4 * f(x + h / 8, y + k2 / 8)
        k4 = h / 4 * f(x + h / 4, y + k3 / 4)
        y3 = y + (k1 + 2 * k2 + 2 * k3 + k4) / 6

        # Оценка погрешности метода Рунге-Ромберга
        R = abs(y3 - y2) / (2**4 - 1)

        # Проверка достижения заданной точности
        if R < epsilon:
            x += h
            y = y1
            h = min(h * 2, b - x)  # Автоматическое выбор нового шага
        else:
            h /= 2  # Уменьшение шага

    return y

# Исходные данные
a = 1
b = 2
y0 = 1
h = 0.1  # Начальный шаг

# Заданная точность
epsilon = 1e-5

# Вычисление значения функции y(x) с заданной точностью
y = runge_romberg(a, b, y0, h, epsilon)

# Вывод результата с точностью до 5 знаков после запятой
print("Значение y(x) в правом конце отрезка: {:.5f}".format(y))