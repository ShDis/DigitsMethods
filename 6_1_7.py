#С точностью eps=10e-8 найти значение интеграла методом Румбе-Ромберга

import math

eps = 1e-8

def f(x):
    return 1.0 / (x + math.sin(0.9 * x))

def romb_romberg(f, a, b, eps):
    n = 1 #Начальное значение для приближения интеграла
    h = b-a
    R = [[0.5 * h * (f(a) + f(b))]] #Расчет первого приближения с учетом правила Симпсона
    while True:
        h /= 2
        F = [f(a + i*h) for i in range(1, 2**n, 2)] #Расчет точек интерполяционной функции
        R.append((n+1)*[None]) #Добавление списка в список для приближения
        R[n][0] = 0.5 * R[n-1][0] + h * sum(F) #Расчет приближения с учетом правила Симпсона
        for m in range(1, n+1):
            R[n][m] = R[n][m-1] + (R[n][m-1] - R[n-1][m-1]) / (4**m - 1) #Расчет приближения с учетом правила Румбе-Ромберга
        if abs(R[n][n-1] - R[n][n]) < eps:
            return R[n][n]
        n += 1

print(romb_romberg(f, 3, 4.5, 10e-8))